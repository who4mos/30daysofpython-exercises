In this README file ill just post the exercises awnsers.

* Day 1: Introduction

** Level 1

*** 1

To check the python version just type in the terminal: ~python --version~

*** 2

#+begin_src python
  3 + 4  # 7
  3 - 4  # -1
  3 * 4  # 12
  3 % 4  # 3
  3 / 4  # 0.75
  3 ** 4 # 81
  3 // 4 # 0
#+end_src

*** 3

#+begin_src python
  "John"
  "Doe"
  "Sweden"
  "Yea"
#+end_src

*** 4

#+begin_src python
  10     # int
  9.8    # float
  3.14   # float
  4 - 4j # complex
  ['Asabeneh', 'Python', 'Finland'] # list
  "John" # string
  "Doe"   # string
  "Spain"  # string
#+end_src

** Level 2

*** 1

File: [[file:day_1/helloworld.py][helloworld.py]]

** Level 3

*** 1

#+begin_src python
  print(type(420))
  print(type(4.20))
  print(type(69j))
  print(type("Nice"))
  print(type(True))
  print(type([1, 2, 3, 4]))
  print(type((1, 2)))
  print(type({1, 1, 2, 3, 3, 2}))
  print(type({"name": "John", "age": 29}))
#+end_src

*** 2

#+begin_src python
  print(((2-3)**2)**(1/2))
  print(((10-8)**2)**(1/2))
#+end_src

* Day 2: Variables, Builtin Functions

** Level 1

*** 1

File: [[file:day_2/variables.py][variables.py]]

*** 2

#+begin_src python :tangle day_2/variables.py
  # Day 2: 30 Days of python programming
#+end_src

*** 3

#+begin_src python :tangle day_2/variables.py
  first_name = "Red"
#+end_src

*** 4

#+begin_src python :tangle day_2/variables.py
  last_name = "Master"
#+end_src

*** 5

#+begin_src python :tangle day_2/variables.py
  full_name = first_name + last_name
#+end_src

*** 6

#+begin_src python :tangle day_2/variables.py
  country = "Pallet"
#+end_src

*** 7

#+begin_src python :tangle day_2/variables.py
  city = "Lavender"
#+end_src

*** 8

#+begin_src python :tangle day_2/variables.py
  age = 420
#+end_src

*** 9

#+begin_src python :tangle day_2/variables.py
  year = 1969
#+end_src

*** 10

#+begin_src python :tangle day_2/variables.py
  is_maried = True
#+end_src

*** 11

#+begin_src python :tangle day_2/variables.py
  is_true = True
#+end_src

*** 12

#+begin_src python :tangle day_2/variables.py
  is_light_on = False
#+end_src

*** 13

#+begin_src python :tangle day_2/variables.py
  a, b =  420, 69
#+end_src

** Level 2

*** 1

#+begin_src python :tangle day_2/variables.py
  print(type(first_name))
  print(type(last_name))
  print(type(full_name))
  print(type(country))
  print(type(city))
  print(type(age))
  print(type(year))
  print(type(is_maried))
  print(type(is_true))
  print(type(is_light_on))
  print(type(a))
  print(type(b))
#+end_src

*** 2

#+begin_src python :tangle day_2/variables.py
  print(len(first_name))
#+end_src

*** 3

#+begin_src python :tangle day_2/variables.py
  print(len(first_name), len(last_name))
#+end_src

*** 4

#+begin_src python :tangle day_2/variables.py
  num_one = 5
  num_two = 4

  total = num_one + num_two
  diff = num_one - num_two
  product = num_one * num_two
  divison = num_one / num_two
  remainder = num_one % num_two
  exp = num_one ** num_two
  floor_division = num_one // num_two
#+end_src

*** 5

#+begin_src python :tangle day_2/variables.py
  r = 30

  area_of_circle = 3.1415 * r ** 2
  print(area_of_circle)

  circum_of_circle = 2 * 3.1415 * r
  print(circum_of_circle)
  
  r = float(input("Circle radius: "))
  area_of_circle = 3.1415 * r ** 2
  print(area_of_circle)
#+end_src

*** 6

#+begin_src python :tangle day_2/variables.py
  first_name = input("First Name: ")
  last_name = input("Last Name: ")
  country = input("Country: ")
  age = int(input("Age: "))
#+end_src

*** 7

#+begin_src python :tangle day_2/variables.py
  print(help("keywords"))
#+end_src

* Day 3: Operators


** 1

#+begin_src python
  age = 420
#+end_src

** 2

#+begin_src python
  height = 1.90
#+end_src

** 3

#+begin_src python
  c = 4 + 2j
#+end_src

** 4

#+begin_src python
  b = int(input("Enter base: "))
  h = int(input("Enter height: "))
  area = .5 * b * h

  print("Area:", area)
#+end_src

** 5

#+begin_src python
  a = int(input("Enter side a: "))
  b = int(input("Enter side b: "))
  c = int(input("Enter side c: "))
  p = a+b+c

  print("Perimeter:", p)
#+end_src

** 6

#+begin_src python
  length = int(input("Length: "))
  width = int(input("Width: "))

  area = .5 * length * width
  p = 2*(length + width)

  print("Area:", area)
  print("Perimeter:", p)
#+end_src

** 7

#+begin_src python
  r = int(input("Radius: "))
  pi = 3.14

  area = pi * r * r
  circum = 2 * pi * r

  print("Area:", area)
  print("Circumference:", circum)
#+end_src

** 8

#+begin_src python
  # x intercept
  y = 0
  x = 2 / 2
  x_inter = (x, y)
  print(x_inter)

  # y intercept
  x = 0
  y = 2 * x - 2
  y_inter = (x, y)
  print(y_inter)

  # slope
  m = (y_inter[1] - x_inter[1]) / (y_inter[0] - x_inter[0])
  print(m)
#+end_src

** 9

#+begin_src python
  p1 = (2, 2)
  p2 = (6, 10)

  # slope
  m = (p2[1] - p1[1]) / (p2[0] - p1[0])
  print(m)

  # euclidean distance
  distance = ((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2) ** .5
  print(distance)
#+end_src

** 10

#+begin_src python
  2.0 == 2.0 # True
#+end_src

** 11

#+begin_src python
  for x in range(-10, 11):
      y = x**2 + 6*x + 9
      if y == 0:
          print("x =", x, "y =", y)
          break
#+end_src

** 12

#+begin_src python
  a = len("python")
  b = len("dragon")

  print(a != b)
#+end_src

** 13

#+begin_src python
  print("on" in "python" and "on" in "dragon")
#+end_src

** 14

#+begin_src python
  sentence = "I hope this course is not full of jargon"
  print("jargon" in sentence)
#+end_src

** 15

#+begin_src python
  a = "python"
  b = "dragon"

  print("on" not in a and "on" not in b)
#+end_src

** 16

#+begin_src python
  print(str(float(len("python"))))
#+end_src

** 17

#+begin_src python
  if n % 2 == 0:
      print("even")
  else:
      print("odd")    
#+end_src

** 18

#+begin_src python
  print(7 // 3 == int(2.7))
#+end_src

** 19

#+begin_src python
  print(type("10") == type(10))
#+end_src

** 20

~int('9.8')~ raises an error. We can convert it to float before coverting to int to the snippet to work

#+begin_src python
  print(int(float("9.8")) == 10)
#+end_src

** 21

#+begin_src python
  hours = int(input("Enter hours: "))
  rate  = int(input("Enter rate per hour: "))

  earning = hours * rate

  print("Your weekly earning is", earning)
#+end_src

** 22

#+begin_src python
  years = int(input("Enter number of years you've lived: "))

  # get seconds by multiplying years by days in year,
  # hours in a day, minutes in a hour and seconds in a minute
  seconds = years * 365 * 24 * 60 * 60

  print("You've lived for", seconds, "seconds.")
#+end_src

** 23

#+begin_src python
  x = 1
  for i in range(5):
      print(x, x**0, x**1, x**2, x**3)
      x += 1
#+end_src

* Day 4: Strings


** 1

#+begin_src python
  s = "Thirty" + " " + "Days" + " " + "Of" + " " + "Python"
  print(s)
#+end_src

** 2

#+begin_src python
  s = "Coding" + " " + "For" + " " + "All"
  print(s)
#+end_src

** 3

#+begin_src python
  company = "Coding For All"
#+end_src

** 4

#+begin_src python
  print(company)
#+end_src

** 5

#+begin_src python
  print(len(company))
#+end_src

** 6

#+begin_src python
  print(company.upper())
#+end_src

** 7

#+begin_src python
  print(company.lower())
#+end_src

** 8

#+begin_src python
  print(company.capitalize())
  print(company.title())
  print(company.swapcase())
#+end_src

** 9

#+begin_src python
  print(company[:6])
#+end_src

** 10

#+begin_src python
  print(company.find("Coding"))
  print(company.index("Coding"))
  print("Coding" in company)
#+end_src

** 11
#+begin_src python
  print(company.replace("Coding", "Python"))
#+end_src

** 12

#+begin_src python
  words = company.split()
  print(words)
#+end_src

** 13

#+begin_src python
  bigtechs = "Facebook, Google, Microsoft, Apple, IBM, Oracle, Amazon".split(',')
  print(bigtechs)
#+end_src

** 14

#+begin_src python
  bigtechs = "Facebook, Google, Microsoft, Apple, IBM, Oracle, Amazon".split(',')
  print(bigtechs)
#+end_src

** 15

~company[0]~ = 'C'

** 16

~len(company)-1~ = 13

** 17

~company[10]~ = ' '

** 18

#+begin_src python
  print("Python"[0] + "For"[0] + "Everyone"[0])
#+end_src

** 19

#+begin_src python
  print("Coding"[0] + "For"[0] + "All"[0])
#+end_src

** 20

#+begin_src python
  print(company.find('C'))
#+end_src

** 21

#+begin_src python
print("Python"[0] + "For"[0] + "Everyone"[0])
#+end_src

** 22

#+begin_src python
  print("Coding For All People".rfind('l'))
#+end_src

** 23

#+begin_src python
  sentence = "You cannot end a sentence with because because because is a conjunction"
  print(sentence.index("because"))
#+end_src

** 24

#+begin_src python
  sentence = "You cannot end a sentence with because because because is a conjunction"
  print(sentence.rindex("because"))
#+end_src

** 25

#+begin_src python
  sentence = "You cannot end a sentence with because because because is a conjunction"
  start = sentence.index("because")
  sz    = len("because because because")

  print(sentence[start:start+sz])
#+end_src

** 26

#+begin_src python
  sentence = "You cannot end a sentence with because because because is a conjunction"
  print(sentence.find("because"))
#+end_src

** 27

#+begin_src python
  sentence = "You cannot end a sentence with because because because is a conjunction"
  start = sentence.index("because")
  sz    = len("because because because")

  print(sentence[start:start+sz])
#+end_src

** 28

Yes.

#+begin_src python
  print("Coding For All".startswith("Coding"))
#+end_src

** 29

No.

#+begin_src python
  print("Coding For All".endswith("coding"))
#+end_src

** 30

#+begin_src python
  print("   Coding For All      ".strip())
#+end_src

** 31

~thirty_days_of_python~

** 32

#+begin_src python
  libs = ['Django', 'Flask', 'Bottle', 'Pyramid', 'Falcon']
  print(' '.join(libs))
#+end_src

** 33

#+begin_src python
  print("I am enjoying this challenge.\nI just wonder what is next.")
#+end_src

** 34

#+begin_src python
  print("Name\t\tAge\tCountry\tCity")
  print("Asabeneh\t250\tFinland\tHelsinki")
#+end_src

** 35

#+begin_src python
  radius = 10
  area = 3.14 * radius ** 2
  print("The area of a circle with radius {} is {:.0f} meters square".format(radius, area))
#+end_src

** 36

There were a lot of ways of doing this.

#+begin_src python
  (a, b) = (8, 6)
  template = f"{a} . {b} = .".replace('.', "{}")

  print(template.format('+', a+b))
  print(template.format('-', a-b))
  print(template.format('*', a*b))
  print(template.format('/', round(a/b, 2)))
  print(template.format('%', a%b))
  print(template.format("//", a//b))
  print(template.format("**", a**b))
#+end_src

* Day 5: Lists

** Level 1

*** 1

#+begin_src python
  xs = []
#+end_src

*** 2

#+begin_src python
  xs = [1, 2, 3, 4, 5, 6]
#+end_src

*** 3

#+begin_src python
  len(xs)
#+end_src

*** 4

#+begin_src python
  xs[0]
  xs[(len(xs)-1)//2]
  xs[len(xs)-1]
#+end_src

*** 5

#+begin_src python
  mixed_data_types = ["John", 24, 1.69, "Loving", "Earth 616"]
#+end_src

*** 6

#+begin_src python
  it_companies = ["Facebook", "Google", "Microsoft", "Apple", "IBM", "Oracle", "Amazon"]
#+end_src

*** 7

#+begin_src python
  print(it_companies)
#+end_src

*** 8

#+begin_src python
  print(len(it_companies))
#+end_src

*** 9

#+begin_src python
  print(it_companies[0])
  print(it_companies[(len(it_companies)-1)//2])
  print(it_companies[len(it_companies)-1])
#+end_src

*** 10

#+begin_src python
  it_companies[3] = "Pear"
  print(it_companies)
#+end_src

*** 11

#+begin_src python
  it_companies.append("AMD")
#+end_src

*** 12

#+begin_src python
  it_companies.insert((len(it_companies)-1)//2, "Nvidia")
#+end_src

*** 13

#+begin_src python
  it_companies[0] = it_companies[0].upper()
#+end_src

*** 14

#+begin_src python
  "#;  ".join(it_companies)
#+end_src

*** 15

#+begin_src python
  "Amazon" in it_companies
#+end_src

*** 16

#+begin_src python
  it_companies.sort()
#+end_src

*** 17

#+begin_src python
  it_companies.reverse()
#+end_src

*** 18

#+begin_src python
  it_companies[:3]
#+end_src

*** 19

#+begin_src python
  it_companies[-3:]
#+end_src

*** 20

#+begin_src python
  it_companies[(len(it_companies)-1)//2]
#+end_src

*** 21

#+begin_src python
  it_companies.pop(0)
#+end_src

*** 22

#+begin_src python
  it_companies.pop((len(it_companies)-1)//2)
#+end_src

*** 23

#+begin_src python
  it_companies.pop()
#+end_src

*** 24

#+begin_src python
  it_companies.clear()
#+end_src

*** 25

#+begin_src python
  del it_companies
#+end_src

*** 26

#+begin_src python
  front_end = ['HTML', 'CSS', 'JS', 'React', 'Redux']
  back_end = ['Node','Express', 'MongoDB']
  joined = front_end + back_end
#+end_src

*** 27

#+begin_src python
  full_stack = joined.copy()
  full_stack += ["Python", "Redux"]
#+end_src

** Level 2


*** 1

#+begin_src python
  ages = [19, 22, 19, 24, 20, 25, 26, 24, 25, 24]
  ages.sort
  min_age = ages[0]
  max_age = ages[-1]

  # ?
  ages.append(min_age)
  ages.append(max_age)

  # odd len
  median = ages[(len(ages)-1)//2]
  # even len
  median = (ages[(len(ages)-1)//2] + ages[(len(ages)-1)//2+1]) / 2

  average = sum(ages) / len(ages)

  ages.sort()
  ages_range = ages[-1] - age[0]

  abs(min_age - average)
  abs(max_age - average)
#+end_src

*** 1

#+begin_src python
  # i will not put the entire countries list because it is too big
  countries[(len(countries)-1)//2] # Lesotho
#+end_src

*** 2

#+begin_src python
  first_half = countries[:((len(countries)-1)//2)+1]
  second_half = countries[((len(countries)-1)//2)+1:]
#+end_src

*** 3

#+begin_src python
  china, russia, usa, *scandic = ["China", "Russia", "USA", "Finland", "Sweden", "Norway", "Denmark"]
#+end_src

* Day 6: Tuples

** Level 1

*** 1

#+begin_src python
  xs = tuple()
#+end_src

*** 2

#+begin_src python
  brothers = ("John", "Dave")
  sisters = ("Erika", "Rita")
#+end_src

*** 3

#+begin_src python
  siblings = brothers + sisters
#+end_src

*** 4

#+begin_src python
  len(siblings) # 4
#+end_src

*** 5

#+begin_src python
  family_members = siblings + ("Jessica", "Frank")
#+end_src

** Level 2

*** 1

#+begin_src python
  *siblings, mother, father = family_members
#+end_src

*** 2

#+begin_src python
  fruits = ("Apple", "Banana", "Strawberry")
  vegetables = ("Lettuce", "Carrots", "Beets")
  animals = ("Cow", "Pig", "Chicken")

  food_stuff_tp = fruits + vegetables + animals
#+end_src

*** 3

#+begin_src python
  food_stuff_lt = list(food_stuff_tp)
#+end_src

*** 4

#+begin_src python
  food_stuff_lt[(len(food_stuff_lt)-1)//2]
#+end_src

*** 5

#+begin_src python
  first_three = food_stuff_lt[:3]
  last_three = food_stuff_lt[-3:]
#+end_src

*** 6

#+begin_src python
  del food_stuff_tp
#+end_src

*** 7

#+begin_src python
  nordic_countries = ('Denmark', 'Finland','Iceland', 'Norway', 'Sweden')
  print("Estonia" in nordic_countries)
  print("Iceland" in nordic_countries)
#+end_src

* Day 7: Sets

#+begin_src python
  # sets
  it_companies = {'Facebook', 'Google', 'Microsoft', 'Apple', 'IBM', 'Oracle', 'Amazon'}
  A = {19, 22, 24, 20, 25, 26}
  B = {19, 22, 20, 25, 26, 24, 28, 27}
  age = [22, 19, 24, 25, 26, 24, 25, 24]
#+end_src

** Level 1

*** 1

#+begin_src python
  print(len(it_companies))
#+end_src

*** 2

#+begin_src python
  it_companies.add("Twitter")
#+end_src

*** 3

#+begin_src python
  it_companies.update({"Nvidia", "AMD"})
#+end_src

*** 4

#+begin_src python
  it_companies.pop()
#+end_src

*** 5

The ~remove~ method raises an error if the value passed is not in the set, ~discard~ does nothing.

** Level 2

*** 1

#+begin_src python
  print(A.union(B))
#+end_src

*** 2

#+begin_src python
  print(A.intersection(B))
#+end_src

*** 3

#+begin_src python
  print(A.issubset(B))
#+end_src

*** 4

#+begin_src python
  print(A.isdisjoint(B))
#+end_src

*** 5

#+begin_src python
  print(A.union(B))
  print(B.union(A))
#+end_src

*** 6

~{27, 28}~

*** 7

#+begin_src python
  del A
  del B
#+end_src

** Level 3

*** 1

#+begin_src python
  age_set = set(age)
  print(len(age))
  print(len(age_site))
#+end_src

The list is bigger because when converting to set, repeating elements are discarded.

*** 2

All four data types can be travessed in a for loop.

While lists, tuples and strings are indexable, sliceable and ordered, sets aren't ordered nor can be indexed/sliced. Sets also don't accept repeated objects.

Tuples and strings are immutable while sets and lists are mutable.

*** 3

#+begin_src python
  sentence = "I am a teacher and I love to inspire and teach people"
  words = sentence.split()
  unique_words = set(words)

  print(unique_words)
#+end_src

* Day 8: Dictionaries

** 1

#+begin_src python
  dogs = dict()
#+end_src

** 2

#+begin_src python
  dog["name"]  = "Max"
  dog["color"] = "Golden Brown"
  dog["breed"] = "Labrador Retriever"
  dog["legs"]  = 4
  dog["age"]   = 3
#+end_src

** 3

#+begin_src python
  student = {
      "first_name": "Emily",
      "last_name": "Chen",
      "gender": "Female",
      "age": 20,
      "marital_status": "Single",
      "skills": ["Python", "HTML"],
      "country": "United States",
      "city": "New York",
      "address": "123 Main Street, Apartment 4B"
  }
#+end_src

** 4

#+begin_src python
  print(len(student))
#+end_src

** 5

#+begin_src python
  print(student["skills"])
  print(type(student["skills"]) == list)
#+end_src

** 6

#+begin_src python
  student["skills"].append("CSS")
#+end_src

** 7

#+begin_src python
  print(student.keys())
#+end_src

** 8

#+begin_src python
  print(student.values())
#+end_src

** 9

#+begin_src python
  print(student.items())
#+end_src

** 10

#+begin_src python
  student.popitem()
#+end_src

** 11

#+begin_src python
  del dog
#+end_src
